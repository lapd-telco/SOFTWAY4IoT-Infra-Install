---
-   hosts: sw4iot-gateway
    become: yes
    remote_user: root
    vars:
        SOFTWAY_VERSION: '1.1'
        BASE_DIR_INSTALL: 'opt'
        DIR_INSTALL_SOFTWAY: 'softway4iot'
        GATEWAY_URL_REGISTER: '/v1/'
        FLESK_PORT_MANAGER: 5000
        IP_ETCD_CONTAINER: '10.250.1.4'
        SOFTWAY_ORCH_GW_URL: 'https://github.com/LABORA-INF-UFG/SOFTWAY4IoT-Infra-Install/raw/master/softway4iot-1.0/install/orch_gw_1.0.0.tar.gz'
        SOFTWAY_COMMONS_DEB_URL: 'https://github.com/LABORA-INF-UFG/SOFTWAY4IoT-Infra-Install/raw/master/softway4iot-1.0/install/database_1.0.0_amd64.deb'
        INTERFACE_MONITOR_DEB_URL: 'https://github.com/LABORA-INF-UFG/SOFTWAY4IoT-Infra-Install/raw/master/softway4iot-1.0/install/interface_monitor_1.0.0_amd64.deb'
        SOFTWAY_NET_MAN_GW: "https://github.com/LABORA-INF-UFG/SOFTWAY4IoT-Infra-Install/raw/master/softway4iot-1.0/install/net-manager-gw_1.1.0_amd64.deb"
    tasks:
       
      # Validação de variáveis obrigatória
        - fail: 
            msg: "É obrigatório informar o endereço IP do GatewayManager através da variável 'ip_gateway_manager'"
          when: ip_gateway_manager == ''

      # Validação de variáveis obrigatória
        - fail: 
            msg: "É obrigatório informar o token de acesso ao GatewayManager através da variável 'gateway_manager_token_access'. Este parâmetro pode ser obtido no WebSM"
          when: gateway_manager_token_access == ''

      # Validação de variáveis obrigatória  
        - fail: 
            msg: "É obrigatório informar o nome da interface física de rede do GatewayManager através da variável 'physical_network_interface'"
          when: physical_network_interface == ''

      # Validação de variáveis obrigatória
        - fail: 
            msg: "É obrigatório informar um número de controle para o Gateway através da variável 'number_gateway'. Este número deve ser maior que 1 e deve ser único para cada gateway"
          when: number_gateway_control == ''

      # Validação de variáveis obrigatória
        - fail: 
            msg: "Número de controle para o Gateway deve ser maior que 1"
          when: number_gateway_control == '1'

      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 1/2
          become: yes
          ignore_errors: yes
          shell:  |
              sudo ovs-vsctl del-br br-data
              sudo ovs-vsctl del-br br-control

      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 1/9
          become: yes
          ignore_errors: yes
          shell:  |
              sudo ovs-vsctl del-br br-data
 
      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 2/9
          become: yes
          ignore_errors: yes
          shell:  |
              sudo ovs-vsctl del-br br-control

      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 3/9
          become: yes
          ignore_errors: yes
          shell:  |
              sudo apt-get purge -y strongswan

      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 4/9
          become: yes
          ignore_errors: yes
          shell:  |
              sudo apt-get auto-remove -y --purge strongswan

      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 5/9
          become: yes
          ignore_errors: yes
          shell:  |
              sudo apt-get purge -y openvswitch-switch
              sudo apt-get auto-remove -y --purge openvswitch-switch
              sudo rm -r /usr/bin/ovs-docker

      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 6/9
          become: yes
          ignore_errors: yes
          shell:  |
              sudo  kill -9 $(pidof sudo dockerd)

      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 7/9
          become: yes
          ignore_errors: yes
          shell:  |
              sudo apt-get purge -y docker-engine docker docker.io docker-ce  
              sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce 
              sudo rm -rf /var/lib/docker /etc/docker

      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 8/9
          become: yes
          ignore_errors: yes
          shell:  |
              sudo rm /etc/apparmor.d/docker

      # Remove todos as possíveis referências de uma instalação anterior Softway
        - name : Remove ovs-docker and openvswitch 9/9
          become: yes
          ignore_errors: yes
          shell:  |
              sudo rm -rf /var/run/docker.sock    

      # Instala os pré-requisitos para os demais pacotes de software (vpn, openswitch, etc)
        - name: Install VPN and OPENVSWITCH requirements
          apt:
              name: ['unzip', 'iptables', 'net-tools','wget', 'strongswan', 'openvswitch-switch', 'python3-pip', 'apt-transport-https','ca-certificates','curl','gnupg2','software-properties-common']
              update_cache: no

      # Remove todos as possíveis referências existentes em IPTables
        - name : Clear IPTables
          become: yes
          ignore_errors: yes
          shell:  |
              iptables --flush
              iptables --table nat --flush
              iptables --delete-chain
              iptables --table nat --delete-chain  

      # # Atualização de pacotes do SO via APT
      #   - name: APT Update
      #     become: true
      #     apt:
      #       upgrade: yes
      #       update_cache: yes
      #       cache_valid_time: 86400 #One day

      # Instala os requisitos mínimos de python para o correto funcionamento do Ansible
        - name : Install python minimun requirements
          become: yes
          shell:  |
              sudo apt update
              sudo apt install python3-pip -y
              sudo apt install python - y
              sudo apt install python-minimal python-simplejson -y
              sudo apt install python-setuptools -y
              sudo apt install python-pip -y

      # Install Pytohn2 apis
        - name: Install Python2 requirements with PIP (setuptools)
          pip:
              name: 
                - setuptools

      # Install Pytohn3 apis
        - name: Install Python3 requirements with PIP (docker, PyYAML, etc)
          pip:
              name: 
                - docker
                - PyYAML
                - urllib3
                - requests
              executable: pip3

      # Diretório de configuração Softway
        - name : Build softway4iot infrastructure directories
          become: yes
          shell:  |
              sudo rm -r /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}
              sudo mkdir /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}
              sudo mkdir /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/scripts
              sudo mkdir /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads
              sudo mkdir /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/logs
              sudo mkdir /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/docker_certs
              sudo mkdir /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/certs
              sudo mkdir /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/orch
              sudo mkdir /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/vpn_keys
     
      # Construção do arquivo de configuração Softway
        - name: Build softway4iot config file
          copy:
            dest: "/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/conf.softway4iot"
            content: |
                NUMBER_GATEWAY_CONTROLL={{ number_gateway_control }}
                PHYSICAL_NETWORK_INTERFACE={{ physical_network_interface }}
                SOFTWAY4IOT_VERSION_NUMBER={{ SOFTWAY_VERSION }}

      # Adiciona chaves + repositório Docker
        - name: Add Docker GPG key into apt
          apt_key: url=https://download.docker.com/linux/ubuntu/gpg

        - name: Add Docker APT repository
          apt_repository:
            repo: deb [arch=amd64] https://download.docker.com/linux/{{ansible_distribution|lower}} {{ansible_distribution_release}} stable

      # Instala Docker
        - name: Install Docker
          apt:
            name: docker-ce
            update_cache: yes
      
      # Download e instalação OVS-DOCKER
        - name : Download and instalation OVS-Docker
          shell:  |
              wget https://raw.githubusercontent.com/openvswitch/ovs/master/utilities/ovs-docker
              sudo mv ovs-docker /usr/bin
              chmod a+rwx /usr/bin/ovs-docker

      # Construção do arquivo para Setup da Rede
        - name: Build Network configuration file
          copy:
            dest: "/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/scripts/initial_setup_network.sh"
            content: |
                #!/bin/bash

                # Interfaces:
                IFACE_LAN_CONTROL=c-control
                IFACE_LAN_DATA=c-data

                iface_wan={{ physical_network_interface }}

                # Params to configure NAT BR_DATA:
                network_lan_data=10.249.{{ number_gateway_control }}.1/24

                # Params to configure NAT BR_CONTROL:
                network_lan_control=10.250.{{ number_gateway_control }}.1/24
                

                # Configure BR_DATA:
                echo "ADD Bridge data"
                ovs-vsctl add-br br-data

                echo "ADD Bridge data internet connection"
                ovs-vsctl add-port br-data $IFACE_LAN_DATA -- set Interface $IFACE_LAN_DATA type=internal
                ifconfig $IFACE_LAN_DATA $network_lan_data up

                echo "1" > /proc/sys/net/ipv4/ip_forward
                iptables -A FORWARD -d $network_lan_data -i $iface_wan -o $IFACE_LAN_DATA -m state --state RELATED,ESTABLISHED -j ACCEPT
                iptables -A FORWARD -s $network_lan_data -i $IFACE_LAN_DATA -j ACCEPT

                ovs-ofctl add-flow br-data ip,priority=2,cookie=2,actions=DROP
                ovs-ofctl add-flow br-data ip,nw_src=$network_lan_data,nw_dst=$network_lan_data,priority=8,actions=NORMAL

                # Configure BR_CONTROL:
                echo "ADD Bridge control"
                ovs-vsctl add-br br-control

                echo "ADD Bridge control internet connection"
                ovs-vsctl add-port br-control $IFACE_LAN_CONTROL -- set Interface $IFACE_LAN_CONTROL type=internal
                ifconfig $IFACE_LAN_CONTROL $network_lan_control up

                echo "1" > /proc/sys/net/ipv4/ip_forward
                iptables -A FORWARD -d $network_lan_control -i $iface_wan -o $IFACE_LAN_CONTROL -m state --state RELATED,ESTABLISHED -j ACCEPT
                iptables -A FORWARD -s $network_lan_control -i $IFACE_LAN_CONTROL -j ACCEPT

                ovs-ofctl add-flow br-control ip,priority=2,cookie=2,actions=DROP
                ovs-ofctl add-flow br-control ip,nw_src=$network_lan_control,nw_dst=$network_lan_control,priority=8,actions=NORMAL

      # Construção do arquivo de configuração DOCKER
        - name: Build Docker configuration file
          copy:
            dest: "/etc/docker/daemon.json"
            content: |
                {
                  "hosts": [
                    "unix:///var/run/docker.sock",
                    "tcp://0.0.0.0:2375"
                  ],
                  "tls": true,
                  "tlscacert": "/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/docker_certs/ca.pem",
                  "tlscert": "/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/docker_certs/server-cert.pem",
                  "tlskey": "/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/docker_certs/server-key.pem",
                  "tlsverify": true
                }
      
      # Executa script que realiza o Setup inicial da rede
        - name: Setup inicial da Rede
          shell:  |
              sudo chmod +x /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/scripts/initial_setup_network.sh
              sudo /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/scripts/initial_setup_network.sh

      # Construção de tunel de comunicação entre Gateway e GatewayManager
        - name: Build communication bridge Gateway / Manager
          shell:  |
              ovs-vsctl add-port br-data vxlan_data -- set Interface vxlan_data type=gre options:remote_ip={{ ip_gateway_manager }}
              ovs-vsctl add-port br-control vxlan_control -- set Interface vxlan_control type=vxlan options:remote_ip={{ ip_gateway_manager }}

      # Transfere código do orquestrador GW
        - name: Softway Orch download
          get_url: 
            url="{{ SOFTWAY_ORCH_GW_URL }}"
            dest="/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/orch/orch_gw.tar.gz"

      # Descompacta código do orquestrador GW
        - name: Orch Gw install
          shell: sudo tar -xvf orch_gw.tar.gz --strip-components 1
          args:
            chdir: /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/orch/


      # Atribuição de permissões NetManager
        - name: Add NetManager permissions
          shell: |
              echo '{{ user_name }} ALL=(ALL:ALL) NOPASSWD:/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/orch/setup_vpn_gw.sh' | sudo EDITOR='tee -a' visudo
      
      # Atribuição de permissões NetManager
        - name: Add NetManager permissions
          shell: |
              echo '{{ user_name }} ALL=(ALL:ALL) NOPASSWD:/usr/bin/ovs-docker
              {{ user_name }} ALL=(ALL:ALL) NOPASSWD:/usr/bin/ovs-vsctl
              {{ user_name }} ALL=(ALL:ALL) NOPASSWD:/sbin/iptables-restore
              {{ user_name }} ALL=(ALL:ALL) NOPASSWD:/sbin/iptables-save
              {{ user_name }} ALL=(ALL:ALL) NOPASSWD:/sbin/iptables' | sudo EDITOR='tee -a' visudo

       # Download do Commons
        - name: Softway Commons download
          get_url: 
            url="{{ SOFTWAY_COMMONS_DEB_URL }}"
            dest="/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads/softway-commons.deb"

      # Instalação Commons
        - name: Softway Commons install
          shell: |
              sudo dpkg -i /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads/softway-commons.deb
              sudo rm /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads/softway-commons.deb

      # Download Interface Monitor
        - name: Softway Interface Monitor download
          get_url: 
            url="{{ INTERFACE_MONITOR_DEB_URL }}"
            dest="/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads/softway-interface-monitor.deb"

      # Instalação Interface Monitor
        - name: Softway Interface Monitor install
          shell: |
              sudo dpkg -i /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads/softway-interface-monitor.deb
              sudo rm /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads/softway-interface-monitor.deb

      # Inicializa Interface Monitor
        - name: Interface Monitor init
          shell: |
              sudo /etc/init.d/interface-monitor start

       # Download Net_managerGw
        - name: Softway Interface Monitor download
          get_url: 
            url="{{ SOFTWAY_NET_MAN_GW }}"
            dest="/{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads/softway-net-manager-gw.deb"

      # Instalação Net_managerGw
        - name: Softway Interface Monitor install
          shell: |
              sudo dpkg -i /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads/softway-net-manager-gw.deb
              sudo rm /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/downloads/softway-net-manager-gw.deb

      # Inicializa Net_managerGw
        - name: Net-Manager-gw start
          shell: |
              sudo /etc/init.d/net-manager-gw start

      # Executa o orquestrador do Gateway -
        - name: Softway Orch Init - With NAT
          when: network_address_translation_ip_gateway is defined
          shell: |
              sudo chmod +x setup_vpn_gw.sh
              sudo python3 install_gw.py {{ number_gateway_control }} {{ ip_gateway_manager }} {{ IP_ETCD_CONTAINER }} {{ ansible_default_ipv4.address }} {{ network_address_translation_ip_gateway }} {{ gateway_manager_token_access }}
          args:
            chdir: /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/orch

      # Executa o orquestrador do Gateway
        - name: Softway Orch Init - WithOut
          when: network_address_translation_ip_gateway is undefined
          shell: |
              sudo chmod +x setup_vpn_gw.sh
              sudo python3 install_gw.py {{ number_gateway_control }} {{ ip_gateway_manager }} {{ IP_ETCD_CONTAINER }} {{ ansible_default_ipv4.address }} {{ ansible_default_ipv4.address }} {{ gateway_manager_token_access }}
          args:
            chdir: /{{ BASE_DIR_INSTALL }}/{{ DIR_INSTALL_SOFTWAY }}/orch

      # Informa o TimeZone p/ melhorar o registro de log
        - name: Set TimeZone
          ignore_errors: yes
          shell: |
              sudo cp /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime

      # Start docker deamon
        - name: Start Docker deamon
          shell: |
              sudo systemctl restart docker
              sudo dockerd &
